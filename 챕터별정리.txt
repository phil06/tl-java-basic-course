!! 객체지향 프로그래밍
{

   1) 설계와 추상화
      
      추상화 = abstract
      추상화 < > 구체화
      추상화 : 공통적인 부분을 뽑아낸 것 (e.g 자동차=추상화, 폭스바겐=객체)
      추상화의 목적 : 보고 이해하기 쉽게?
                      니즈에 의한 정보(목적)에 대해서만 집중해서 추상화 하고 나머지 정보는 은닉(캡슐화)
      인지과부화를 줄이기 위한 추상화
      * 정보은닉
      
분류를 했다 - 클래스가 추상화된게 타입

객체지향의 용어에 클래스는 X 




클래는 is a ~~~ 로 표현가능.

super type (e.g 동물)

sub type (e.g 펭귄)

객체 (e.g 뽀로로)


분류된것 - 클래스 (classified) 

개념 (concept) > 구체화 > type(oop) > class(proto type) > instance
---추상화 ------------------------구체화 -----------------구체화



메소드 - 행위 / 컨셉 - 클래스


분류할수있는것 클래스(붕어빵) / 객체는 유일하다.(뽀로로, 이민호)








   2) 은닉화
      인지과부하를 없앨 수 있음(인터페이스만 있으면 되니까)
      인터페이스를 만드는것도 일종의 추상화
      캡슐화는 정보은닉을 하기 위한 행위(은닉화가 좀더 추상화된 정의)



-----------------------------------------------------------------------------------------------------------------------

static 은 클래스로드에서 메모리에 올라올때 생성된다

라이프사이클
  main호출 - static초기화 - 인스턴스 블럭 초기화 - 인스터스 생성자 호출 -  

java파일 안에는 class는 public 하나만 들어감
}

!! 입력과 출력 
{
	1. console 에서 실행
	  > homedir 로 이동해서
	  > java -cp bin ~~~~
	    [java] 
		[-cp bin] 클래스가 위치한 디렉토리(클래스패스) 지정
		[className] (*.class)확장자는 붙이지 않아요
		            풀패키지 경로를 써야 합니다.
		
}

!! 유효범위 (전역변수, 지역변수) {
	같은 이름을 사용하게 되면 충돌이 일어날 가능성이 있다.
	e.g) left : 좌항 / 떠나다
	     right : 우항 / 권리
	이와같은 충돌을 해결하기 위해서 유효범위라고 하는 scope 개념을 고안하다.
	
	정적인 유효범위(static) > 
	동적인 유효범위(dynamic) > 
	
	객체지향에서 유효범위 사용하는 이유
}

!! 초기화와 생성자 (전역변수, 지역변수){
	생성자 > 어떠한 메소드보다 먼저 실행됨
	? 생성자 라이프사이클(주기/순서)
}

!! 상속 {
	상속 >
		무언가를 물려준다.
		B가 A가 가진 메소드나 변수를 그대로 물려받고 그위에 추가로 수정할 수 있는것.
		기존의 객체를 그대로 유지하면서 기능을 추가
	클래스 다이어그램 안에선 >
		부모클래스 <-(속빈삼각형+실선) 자식클래스
		 
}

!! overriding{
	여태까지의 상속은 자신의 특정한 멤버변수나 메소드를 자식클래스가 그대로 사용가능하면서 자식이 새로운것을 추가하면서 쓴다.
	부모의 특정 메소드를 자식이 커스터마이징 해서 쓰는것
	
	메소드 이름/매개변수의 숫자와 데이터타입 그리고 순서 / 리턴타입 <= 서명(signature) 라고 하는데 이것이 일치해야 오버라이딩
}

!! overloading{
	같은 이름 다른 매개변수의 숫자, 형식으로인해 오버로딩이 된다.
}

!! classpath{
	java -classpath ".;lib" ClasspathDemo2
	> -classpath : 클래스패스 지정
	  "~;~" : 패스의 우선적으로 참조할 디렉토리 설정
	          (경로와 경로를 구분해주는 구분자 역할)
	* 클래스패스를 지정하지 않을경우엔 현재 위치한 디렉토리에서 명시적으로 찾는다.
	
	환경변수 : 컴파일된 클래스파일이 위치할 디렉토리(경로지정)
	           운영체제 안에 세팅하는 변수(어디에 있던 접근가능한 글로벌한 변수)
}

!! 패키지{
	동일한 클래스(이름의 중복/충돌)를 해결하기 위해 고안됨
	like 디렉토리
	package tl_java_basic_course.tutorial.object;	//내가 속한 패키지
	
	bin 폴더 > 바이트 코드의 형태의 클래스가 위치
	src 폴더 > 버추얼머신이 이해할 수 있는 소스 코드가 위치
	
	// D:\Git\tl-java-basic-course\tl_java_basic_course>javac src/tl_java_basic_course/tutorial/packages/example3/*.java
	> *.java 하면 모든 파일을 컴파일 한다는것
	> 하지만 이렇게 하면 실행한 위치에 클래스파일이 생성됨
	
	// D:\Git\tl-java-basic-course\tl_java_basic_course>javac src/tl_java_basic_course/tutorial/packages/example3/*.java -d bin
	> -d [경로] 옵션은 컴파일된 클래스파일이 위치할 디렉토리를 지정하겠다는것
	* 자바 컴파일러가 자동으로 패키지에 해당하는 디렉토리를 생성해 준다.
	
}

!! API 와 API문서 보는법 {
	// System.out.println();
	System - out - println 이라는 메소드가 존재하는것
	out 은 static 메소드(인스턴스화 하지 않았어도 사용할 수 있어서?)

	// API 에 대해서
	UI = User Interface
	API = Application Programming Interface
	
}

!! 접근제어자 {
	* 접근제어자를 사용하는 이유
	  > 캡슐화를 하기 위해
	    구현체를 숨기기 위해
		
	* 제어자 종류
	public - 모두다 접근가능
	protected - 인스턴스화 통해서 접근하면 안되고 extends 를 통해 자기거 인것처럼 접근하면 가능?
				클래스를 상속받는 클래스 객체 내에서 사용 가능 (subType 에서 접근가능)
	default(package) - 
	private - 
}

!! abstract {
	추상메소드만 있으면 인터페이스 / 추상메소드도 있으면 추상클래스?
	
}

!! 인터페이스 {
	클래스가 있고 그 객체가 특정 인터페이스를 사용한다면 반드시 인터페이스가 가진 메소드를 구현하도록 강제하는것
	클래스 A는 interface I 를 구현한다.
	인터페이스를 이용해 서로 동일한 메소드를 만들도록 규약을 만들어서 공유
	
	interface vs abstract >
	인터페이스는 본체가 없는 메소드를 가져야 한다.
	추상클래스는 구체적인 로직이나 상태를 가지고 있어도 된다.
	
	특징>
		- 하나의 클래스가 여러개의 인터페이스를 구현할 수 있다.
		- 인터페이스도 상속이 된다
		- 인터페이스의 멤버는 반드시 public 이다.
		  (public 을 생략하면 접근 제어자 default 가 되는것이 아니라 public 이 된다 - 인터페이스의 멤버는 무조건 public 이기 때문에)
		
}

!! 다형성 {
	다형성 = Polymorphism
	클래스를 인스턴스화 시킬때 그걸 담는 변수의 데이터타입은 해당 클래스가 될 수도 있지만 해당 클래스의 부모 클래스가 될 수도 있다.
	 -> 부모클래스가 해당 클래스인것처럼 작동할 수 있다.
	 
	상속받을 경우 부모클래스 행세를 할 수 있다.
	A obj - new B()  #B extends A
}

!! 예외 {
	
}











