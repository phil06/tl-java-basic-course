!! 객체지향 프로그래밍

   1) 설계와 추상화
      
      추상화 = abstract
      추상화 < > 구체화
      추상화 : 공통적인 부분을 뽑아낸 것 (e.g 자동차=추상화, 폭스바겐=객체)
      추상화의 목적 : 보고 이해하기 쉽게?
                      니즈에 의한 정보(목적)에 대해서만 집중해서 추상화 하고 나머지 정보는 은닉(캡슐화)
      인지과부화를 줄이기 위한 추상화
      * 정보은닉
      
분류를 했다 - 클래스가 추상화된게 타입

객체지향의 용어에 클래스는 X 




클래는 is a ~~~ 로 표현가능.

super type (e.g 동물)

sub type (e.g 펭귄)

객체 (e.g 뽀로로)


분류된것 - 클래스 (classified) 

개념 (concept) > 구체화 > type(oop) > class(proto type) > instance
---추상화 ------------------------구체화 -----------------구체화



메소드 - 행위 / 컨셉 - 클래스


분류할수있는것 클래스(붕어빵) / 객체는 유일하다.(뽀로로, 이민호)








   2) 은닉화
      인지과부하를 없앨 수 있음(인터페이스만 있으면 되니까)
      인터페이스를 만드는것도 일종의 추상화
      캡슐화는 정보은닉을 하기 위한 행위(은닉화가 좀더 추상화된 정의)



-----------------------------------------------------------------------------------------------------------------------

static 은 클래스로드에서 메모리에 올라올때 생성된다

라이프사이클
  main호출 - static초기화 - 인스턴스 블럭 초기화 - 인스터스 생성자 호출 -  

java파일 안에는 class는 public 하나만 들어감