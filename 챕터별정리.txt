!! 객체지향 프로그래밍
{

   1) 설계와 추상화
      
      추상화 = abstract
      추상화 < > 구체화
      추상화 : 공통적인 부분을 뽑아낸 것 (e.g 자동차=추상화, 폭스바겐=객체)
      추상화의 목적 : 보고 이해하기 쉽게?
                      니즈에 의한 정보(목적)에 대해서만 집중해서 추상화 하고 나머지 정보는 은닉(캡슐화)
      인지과부화를 줄이기 위한 추상화
      * 정보은닉
      
분류를 했다 - 클래스가 추상화된게 타입

객체지향의 용어에 클래스는 X 




클래는 is a ~~~ 로 표현가능.

super type (e.g 동물)

sub type (e.g 펭귄)

객체 (e.g 뽀로로)


분류된것 - 클래스 (classified) 

개념 (concept) > 구체화 > type(oop) > class(proto type) > instance
---추상화 ------------------------구체화 -----------------구체화



메소드 - 행위 / 컨셉 - 클래스


분류할수있는것 클래스(붕어빵) / 객체는 유일하다.(뽀로로, 이민호)








   2) 은닉화
      인지과부하를 없앨 수 있음(인터페이스만 있으면 되니까)
      인터페이스를 만드는것도 일종의 추상화
      캡슐화는 정보은닉을 하기 위한 행위(은닉화가 좀더 추상화된 정의)



-----------------------------------------------------------------------------------------------------------------------

static 은 클래스로드에서 메모리에 올라올때 생성된다

라이프사이클
  main호출 - static초기화 - 인스턴스 블럭 초기화 - 인스터스 생성자 호출 -  

java파일 안에는 class는 public 하나만 들어감
}

!! 입력과 출력 
{
	1. console 에서 실행
	  > homedir 로 이동해서
	  > java -cp bin ~~~~
	    [java] 
		[-cp bin] 클래스가 위치한 디렉토리(클래스패스) 지정
		[className] (*.class)확장자는 붙이지 않아요
		            풀패키지 경로를 써야 합니다.
		
}

!! 유효범위 (전역변수, 지역변수) {
	같은 이름을 사용하게 되면 충돌이 일어날 가능성이 있다.
	e.g) left : 좌항 / 떠나다
	     right : 우항 / 권리
	이와같은 충돌을 해결하기 위해서 유효범위라고 하는 scope 개념을 고안하다.
	
	정적인 유효범위(static) > 
	동적인 유효범위(dynamic) > 
	
	객체지향에서 유효범위 사용하는 이유

@@ closer
public static 이 붙어야 전역

}

!! 초기화와 생성자 (전역변수, 지역변수){
    ? 생성자가 메소드냐? 일?에 디자인 측면에선 생성자라고 할순 있는데 언어적인 측면에선 메소드라고 할 수도 이꼬.. 어려운 주제임
	생성자 > 어떠한 메소드보다 먼저 실행됨
	? 생성자 라이프사이클(주기/순서)
	
}

!! 상속 {
	상속 >
		무언가를 물려준다.
		
		B가 A가 가진 메소드나 변수를 그대로 물려받고 그위에 추가로 수정할 수 있는것.
		기존의 객체를 그대로 유지하면서 기능을 추가
	클래스 다이어그램 안에선 >
		부모클래스(super class) <-(속빈삼각형+실선) 자식클래스(sub class)
		
	## 상속받았을때 protected 가 없는데 왜 사용가능한지? <- 접근제어자에서 확인
	
	[용어]
	  다중상속 > 수퍼클래스가 여러개인거 
	  
	  
}